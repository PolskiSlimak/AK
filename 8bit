Progr           segment ;dyrektywa służąca do deklaracji segmentów logicznych
                assume  cs:Progr, ds:dane, ss:stosik ;asume - przypisuje etykietę do (części) wskazanego rejestru segmentowego 
						      (segment logiczny), 
						     ;nie zmiania zawartości rejestrów segmentowych, dlatego trzeba ustawić 
						      ich wartości samemu.
						     ;Dzięki assume można używać offsetu
start:          mov     ax,dane ;inicjalizujemy segmenty logiczne, do ax przesyłamy adres pierwszej komórki segmentu logicznego dane
				;start jest etykietą, która wskazuje gdzie zaczyna się nasz program, end jest dyrektywą, 
				 która pokazuje gdzie się kończy
				;start musi być w progr, bo asembler nie wie czym jest start jesli kod nie jest w code segment
                mov     ds,ax ;przenosimy do ds, bo nie możemy przesyłać bezpośrednio do segmentów wartości i adresów
                mov     ax,stosik
                mov     ss,ax
                mov     sp,offset szczyt ;offset od początku stosiku to szczytu, offset to adres względny 
                                ;poczatek programu
				poczatek:
					mov si, 0 ;zerujemy source index	
					lea dx, poczatkowa_wiad ;rozkaz LEA załadowuje adres efektywny
								;LEA ładuje adres, MOV ładuje wartość
					mov ah, 9 ;kod obsługi przerwania 21, który wyświetla tekst z dx
					int 21h ;przerwanie 21 wywołuje funkcję systemową, która jest w ah
					mov ah, 1 ;kod obsługi przerwania 21, który pobiera znak i przesyła go do al(?)
					int 21H 
					mov znak,al ;przesyłamy kod ascii pobranego znaku do zmiennej(?) znak
					mov cl,3
					cmp al,2DH ;sprawdzamy czy został pobrany minus...
					je liczba_minusowa
					cmp al,2BH ;...czy plus
					je liczba_dodatnia
					lea dx, error ;jeśli nie minus i nie plus to przesyłamy do dx adres komórki od której są
						      ;zapisane litery (ich kody ascii) komunikatu błędu
					mov ah, 9
					int 21h
					jmp poczatek
				liczba_minusowa:
					mov znak,31H ;przesyłamy 1 dec do znaku
					lea dx, wiad_dla_min 
					mov ah, 9
					int 21h
					call wczytywanie
					mov dl,enterr
					mov ah,02H
					int 21h
					lea dx, wypisz_info_zm
					mov ah, 9
					int 21h
					call wypisywanie_bin
					mov dl,enterr
					mov ah,02H
					int 21h
					;cmp cyfry,0
					;je jesli_minus_zero
					lea dx, wypisz_info_zu1
					mov ah, 9
					int 21h
					call wypisywanie_ZU1
					mov dl,enterr
					mov ah,02H
					int 21h
					lea dx, wypisz_info_zu2
					mov ah, 9
					int 21h
					call wypisywanie_ZU2
					mov ah, 4ch
					int 21h
				liczba_dodatnia:
					mov znak,30H
					lea dx, wiad_dla_dod
					mov ah, 9
					int 21h
					call wczytywanie
					mov dl,enterr
					mov ah,02H
					int 21h
					lea dx, wypisz_info_zm
					mov ah, 9
					int 21h
					call wypisywanie_bin
					mov dl,enterr
					mov ah,02H
					int 21h
					jesli_minus_zero:
					;cmp cyfry,0
					;call zmiana_znaku
					lea dx, wypisz_info_zu1
					mov ah, 9
					int 21h
					call wypisywanie_bin
					mov dl,enterr
					mov ah,02H
					int 21h
					lea dx, wypisz_info_zu2
					mov ah, 9
					int 21h
					call wypisywanie_bin
					mov ah, 4ch
					int 21h
				wczytywanie:
					mov ah, 1
					int 21H ;pobieramy znak od użytkownika
					cmp al, 13 ;sprawdzamy czy nie został wpisany enter
					je koniec1 ;jeśli equals to koniec
					sub al, 30H ;odejmujemy od pobranego znaku 30h żeby otrzymać liczbę dec
					cmp al, 10 ;od otrzymanej liczby odejmujemy 10
					jns info_error ;jeśli wynik jest >10 to znaczy, że został pobrany znak nie z zakresu 0-9,
						       ;wtedy s=0 i error
					mov bl, al ;przesyłamy naszą cyfrę do bl
					mov ax, 10 ;do ax przesyłamy 10
					mul si ;to samo co 'mul ax, si', ax=ax*si
					       ;mnożymy cyfrę otrzymaną w poprzedniej iteracji razy 10
					       ;żeby kolejną cyfrę dodać na mniej znaczącą pozycję
					add ax, bx ;dodajemy naszą cyfrę do wyniku mnożenia (w pierwszej iteracji do 0)
					mov si, ax ;przesyłamy wynik do si
					loop wczytywanie
				koniec1:
					mov ax, si ;przesyłamy otrzymaną do liczbę do ax
					;cmp ax,0 ;możemy sprawdzić czy nie został wpisany jakiś znak, który jest niżej niż 0
					;js info_error
					cmp ax,129 ;sprawdzamy czy nie jest większa od 129
					jns info_error
					cmp ax,128 ;sprawdzamy czy jest to 128
					je sprawdzanie_znaku ;jeśli tak to sprawdzamy jaki był znak, bo nie może być +128
							     ;bo nie może być +128, ale może być -128
				powrot:
					mov cyfry, al ;przesyłamy naszą liczbę do zmiennej(?) al, wystarczy tylko do al, bo mamy pewność
						      ;że nie zajmuje więcej niż 8 bitów
					mov cx,4 
					lea dx, wypisz_info_hex
					mov ah, 9
					int 21h ;wypisuje wszystkie chary które zaczynają się od komórki, której adres jest w dx?
					xor dx,dx ;zerujemy dx
				wypisywanie_hex:
					mov dl,cyfry
					shr dl,cl;dokladne dzialanie shra trzeba ogarnac
					and dl,0FH
					cmp dl,9
					jbe wyp
					add dl,7
				wyp:
					add dl,'0'
					mov ah,02H;sprawdzic przerwania 
					int 21H
					sub cx,4
					jns wypisywanie_hex
					ret
				info_error:
					lea dx, wiad_error
					mov ah, 9
					int 21h
					call poczatek
				sprawdzanie_znaku:
					cmp znak,31H ;sprawdzamy czy znak to minus (tu nie powinno być 2DH zamiast 31H?)
					jne zly_znak ;jeśli to nie był minus to liczba +128 jest poza przedziałem
					jmp powrot ;jeśli to był minus to lecimy dalej z -128
				zly_znak:
					lea dx, wiad_znak
					mov ah, 9
					int 21h
					call poczatek
				wypisywanie_bin:
					mov bl,cyfry		
					mov cx,7
					mov dl,znak
					mov ah,02H
					int 21h
					mov dl,'.'
					mov ah,02H
					int 21h	
					shl bl,1
				loopBin:
					xor dx,dx			 
					shl bl,1			
					jnc wpisywanie_do_zmiennej			 
					mov dx,1			
				wpisywanie_do_zmiennej:	
					add dx,'0'
					mov ah, 02H
					int 21h
					loop loopBin
					ret
				wypisywanie_ZU1:
					not cyfry;jak dziala not
					call wypisywanie_bin
					ret
				wypisywanie_ZU2:
					add cyfry,1
					call wypisywanie_bin
					ret
				zmiana_znaku:
					mov znak,30H
					ret
					;+128 problem wyswietla zla wartosc przez to ze uzywamy znaku a nie naszej liczby, waarunek sprawdzajacy liczbe lub cos innego
Progr           ends ;kończy obszar danego segmentu logicznego

dane            segment
	   poczatkowa_wiad db 10,13,"Wpisz minus albo plus:$"
	   error db 10,13,"Wpisales zly znak. Musisz podac - albo +$"
	   wiad_dla_dod db 10,13,"Wpisz liczbe dla obliczen dodatnich:$"
	   wiad_dla_min db 10,13,"Wpisz liczbe dla obliczen minusowych:$"
	   wiad_error db 10,13,"Wpisales zla wartosc$"
	   wiad_znak db 10,13,"Nie mozesz wpisac 128$"
	   wypisz_info_hex db 10,13,"Twoja liczba hexadecymalnie: $"
	   wypisz_info_zm db 10,13,"Twoja liczba w ZM: $"
	   wypisz_info_zu1 db 10,13,"Twoja liczba w ZU1: $"
	   wypisz_info_zu2 db 10,13,"Twoja liczba w ZU2: $"
	   cyfry db 0
	   znak db 0
	   enterr db 10,13
dane            ends

stosik          segment
                dw 100h dup(0) ;declare word, 256 decymalnie 
szczyt          Label word  ;dyrektywa label służy do tworzenia etykiet, przyporządkowuje im aktualną wartość adresu
							;jest ona użyteczna przy nadawaniu zmiennym pamięciowym już nazwanym, innej nazwy z innym kodem
stosik          ends

end start


;Dyrektywa - zbiór instrukcji asemblera. Dyrektywy nie modyfikują bezpośrednio zawartości danych, 
;ale są dla asemblera czymś co definiuje jak czytać kod., definiują jezyk, skłądnię. 
